# If you don't have settings.py in this directory, you should copy
# this file to settings.py and customize it.

from settings_base import *
import sys, os
import djcelery

DATABASES = {
    'default': {
        'ENGINE': 'custom_postgresql_psycopg2', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'CATMAID_DATABASE_NAME',      # Or path to database file if using sqlite3.
        'USER': 'CATMAID_DATABASE_USERNAME',  # Not used with sqlite3.
        'PASSWORD': 'CATMAID_DATABASE_PASSWORD',  # Not used with sqlite3.
        'HOST': '',                           # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                           # Set to empty string for default. Not used with sqlite3.
    }
}

DEBUG = True
TEMPLATE_DEBUG = DEBUG

# Make this unique, and don't share it with anybody.
# (You can generate a key with:
# >>> from random import choice
# >>> ''.join([choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)') for i in range(50)])
# '@er^vm3$w#9n$)z3avny*hh+l^#ezv+sx*(72qwp0c%%cg1$i+'
# ... which is how "django-admin startproject" does it.)
SECRET_KEY = 'CATMAID_SECRET_KEY'

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    'CATMAIDPATH/django/templates'
)

# Absolute path to the directory that holds user generated data
# like cropped microstacks. Make sure this folder is writable by
# the user running the webserver (and Celery if croppish should
# be used).
# Example: "/var/www/example.org/media/"
MEDIA_ROOT = 'CATMAID_WRITABLE_PATH'

# URL that gives access to files stored in MEDIA_ROOT (managed stored
# files). It must end in a slash if set to a non-empty value.
# Example: "http://media.example.org/"
MEDIA_URL = '/CATMAID_SUBDIR/files/'

# Static path to store generated NeuroHDF files (needs to be writable)
# as subdirectory of MEDIA_ROOT.
MEDIA_HDF5_SUBDIRECTORY = 'CATMAID_HDF5_SUBDIR'

# Static path to store cropped (needs to be writable) as subdirectory
# of MEDIA_ROOT.
MEDIA_CROPPING_SUBDIRECTORY = 'CATMAID_CROP_SUBDIR'

# The URL where static files can be accessed, relative to the domain's root
STATIC_URL = '/CATMAID_SUBDIR/static/'
# The absolute local path where the static files get collected to
STATIC_ROOT =  'CATMAIDPATH/django/static'

# Local time zone for this installation. Choices can be found here:
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# although not all choices may be available on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
TIME_ZONE = 'CATMAID_TIMEZONE'

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
LANGUAGE_CODE = 'en-gb'

# Usually, CATMAID's Django back-end is not accessible on a domain's
# root ('/'), but rather a sub-directory like 'catmaid'. Django needs
# to know about this relative path and some web and WSGI servers pass
# this information to Django automatically (e.g. Apache + mod_wsgi).
# However, some don't (e.g. Nginx + Gevent) and the easiest way to
# tell Django were it lives is with the help of the FORCE_SCRIPT_NAME
# variable. It must not have a trailing slash.
FORCE_SCRIPT_NAME = '/CATMAID_SUBDIR'

# URL of your CATMAID's Django instance, relative to the domain root
CATMAID_URL = '/CATMAID_SUBDIR/'

# Local path to store HDF5 files
# File name convention: {projectid}_{stackid}.hdf
HDF5_STORAGE_PATH = 'CATMAIDPATH/django/hdf5/'

# Importer settings
# If you want to use the importer, please adjust these settings. The
# CATMAID_IMPORT_PATH in (and below) the importer should look for new
# data. The CATMAID_IMPORT_URL refers is the URL as seen from outside
# that gives read access to the CATMAID_IMPORT_PATH.
CATMAID_IMPORT_PATH = 'CATMAIDPATH/httpdocs/data'
CATMAID_IMPORT_URL = 'http://CATMAID_SERVERNAME/CATMAID_SUBDIR/data'

## Celery configuration
djcelery.setup_loader()
CELERYD_CONCURRENCY = 1
# Simple django-kumbo message broker
INSTALLED_APPS += ("djkombu",)
BROKER_BACKEND = "djkombu.transport.DatabaseTransport"

# TODO: clean up

# django-allauth

# Specifies the login method to use -- whether the user logs in by entering
# his username, e-mail address, or either one of both. Possible values
# are 'username' | 'email' | 'username_email'
# ACCOUNT_AUTHENTICATION_METHOD

# The URL to redirect to after a successful e-mail confirmation, in case no
# user is logged in. Default value is settings.LOGIN_URL.
# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL

# The URL to redirect to after a successful e-mail confirmation, in case of
# an authenticated user. Default is settings.LOGIN_REDIRECT_URL
# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL

# Determines the expiration date of email confirmation mails (# of days).
# ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3

# The user is required to hand over an e-mail address when signing up.
# ACCOUNT_EMAIL_REQUIRED = True

# Determines the e-mail verification method during signup. When set to
# "mandatory" the user is blocked from logging in until the email
# address is verified. Choose "optional" or "none" to allow logins
# with an unverified e-mail address. In case of "optional", the e-mail
# verification mail is still sent, whereas in case of "none" no e-mail
# verification mails are sent.
# ACCOUNT_EMAIL_VERIFICATION = "optional"

# Subject-line prefix to use for email messages sent. By default, the name
# of the current Site (django.contrib.sites) is used.
# ACCOUNT_EMAIL_SUBJECT_PREFIX = '[Site] '

# A string pointing to a custom form class (e.g. 'myapp.forms.SignupForm')
# that is used during signup to ask the user for additional input
# (e.g. newsletter signup, birth date). This class should implement a
# 'save' method, accepting the newly signed up user as its only parameter.
ACCOUNT_SIGNUP_FORM_CLASS = 'neurocity.forms.SignupForm'

# When signing up, let the user type in his password twice to avoid typ-o's.
# ACCOUNT_SIGNUP_PASSWORD_VERIFICATION = True

# Enforce uniqueness of e-mail addresses.
# ACCOUNT_UNIQUE_EMAIL = True

# A callable (or string of the form 'some.module.callable_name') that takes
# a user as its only argument and returns the display name of the user. The
# default implementation returns user.username.
# ACCOUNT_USER_DISPLAY

# An integer specifying the minimum allowed length of a username.
# ACCOUNT_USERNAME_MIN_LENGTH = 1

# The user is required to enter a username when signing up. Note that the
# user will be asked to do so even if ACCOUNT_AUTHENTICATION_METHOD is set
# to email. Set to False when you do not wish to prompt the user to enter a
# username.
# ACCOUNT_USERNAME_REQUIRED = True

# render_value parameter as passed to PasswordInput fields.
# ACCOUNT_PASSWORD_INPUT_RENDER_VALUE = False

# An integer specifying the minimum password length.
# ACCOUNT_PASSWORD_MIN_LENGTH = 6

# does not appear to work
ACCOUNT_LOGOUT_REDIRECT_URL = '1234'

# Request e-mail address from 3rd party account provider? E.g. using OpenID
# AX, or the Facebook 'email' permission.
# SOCIALACCOUNT_QUERY_EMAIL = ACCOUNT_EMAIL_REQUIRED

# Attempt to bypass the signup form by using fields (e.g. username, email)
# retrieved from the social account provider. If a conflict arises due to a
# duplicate e-mail address the signup form will still kick in.
# SOCIALACCOUNT_AUTO_SIGNUP = True

# Enable support for django-avatar. When enabled, the profile image of the
# user is copied locally into django-avatar at signup. Default is
# 'avatar' in settings.INSTALLED_APPS.
# SOCIALACCOUNT_AVATAR_SUPPORT

# Dictionary containing provider specific settings.
# SOCIALACCOUNT_PROVIDERS

DEFAULT_FROM_EMAIL = ''

# http://stackoverflow.com/questions/13782979/django-social-auth-redirect-uri-invalid
#USE_X_FORWARDED_HOST = True

# Google Analytics Tracing id
GOOGLE_TRACKING_ID = ''

LOGIN_URL = '/accounts/login/'
LOGOUT_URL = '/'
LOGIN_REDIRECT_URL = '/'

STATICFILES_DIRS = (
    ('neurocity', relative('..', '..', 'applications', 'neurocity', 'static' ) ) ,
)

USE_I18N = True
LANGUAGE_CODE = 'de'
LOCALE_PATHS = (
    relative('..', '..', 'applications', 'neurocity', 'locale' ),
    relative('..', '..', 'templates', 'neurocity', 'locale' )
)